#!/usr/bin/env python
"""
Shuffle cells within specified columns of a CSV file. Like GNU shuf, but for CSV.

Forked from csvcut (https://gist.github.com/bycoffe/187278)
Improvements were made thanks to review in http://codereview.stackexchange.com/q/129806/13659


Usage:
    csvshuf -c1 foobar.csv
    (shuffles the first column of each row of foobar.csv)

    svshuf -c3 -s foobar.csv
    (shuffles the third column of each row using Sattolo's algorithm.)

    csvshuf foobar.csv
    (shuffles all the columns of foobar.csv)

    csvshuf -C1 foobar.csv
    (shuffles all the columns but the first of foobar.csv)

    head -10 foobar.csv | csvshuf -c 1,3
    (shuffles the first and third columns of the first ten lines of foobar.csv)

    csvshuf -c1,3 -d "|" foobar.csv
    (shuffles the first and third columns of the pipe-delimited foobar.csv)

    csvshuf -c 1,3 -t foobar.csv
    (shuffles the first and third columns of the tab-delimited foobar.csv if present, the -d option will be ignored.)

    csvshuf -c 1,2,3 -d "|" -o , foobar.csv
    (shuffles the first three columns of the pipe-delimited foobar.csv; output will be comma-delimited.)

    csvshuf -c 1,2,3 -o "|" foobar.csv
    (shuffles the first three columns of the comma-delimited foobar.csv; output will be pipe-delimited.)

    csvshuf -c 1,2 -d "," -q "|" foobar.csv
    (shuffles the first two columns of the comma-delimited, pipe-quoted foobar.csv.)
"""

import csv
import sys
import random
import getopt


def shuffle_sattolo(items):
    """Shuffle items in place using Sattolo's algorithm."""
    _randrange = random.randrange
    for i in reversed(range(1, len(items))):
        j = _randrange(i)  # 0 <= j < i
        items[j], items[i] = items[i], items[j]


def main():
    opts, args = getopt.getopt(sys.argv[1:], "c:C:d:o:q:tks", [])
    if args:
        input_file = open(args[0], 'U')
    else:
        input_file = sys.stdin

    delimiter = ','
    output_delimiter = ','
    cols = None
    no_cols = None
    quotechar = None
    shuffle = random.shuffle

    if opts:
        opts = dict(opts)
        if '-c' in opts:
            cols = map(int, opts['-c'].split(','))
        elif '-C' in opts:
            no_cols = map(int, opts['-C'].split(','))
        if '-s' in opts:
            shuffle = shuffle_sattolo
        if '-t' in opts:
            delimiter = "\t"
        elif '-d' in opts:
            delimiter = opts['-d']
        if '-o' in opts:
            output_delimiter = opts['-o']
        if '-q' in opts:
            quotechar = opts['-q']

    if cols and 0 in cols or no_cols and 0 in no_cols:
        sys.stderr.write('Invalid column 0. Columns are 1-based.\n')
        exit(1)

    reader = csv.reader(input_file, delimiter=delimiter, quotechar=quotechar)
    headers = next(reader)

    table = []
    for c in range(len(headers)):
        table.append([])

    for row in reader:
        for c in range(len(headers)):
            table[c].append(row[c])

    if not cols and not no_cols:
        cols = range(len(headers))
    elif no_cols:
        cols = list(set(range(len(headers))) - set(no_cols))

    for c in cols:
        if c > len(headers):
            sys.stderr.write('Invalid column {0}. Last column is {1}.\n'.format(c, len(headers)))
            exit(1)
        shuffle(table[c - 1])

    table = zip(*table)

    writer = csv.writer(sys.stdout, delimiter=output_delimiter)
    writer.writerow(headers)
    for row in table:
        writer.writerow(row)


if __name__ == "__main__":
    main()
